[{"title":"Daily Spanish 20200204","url":"http://jcwu.ml/2020/02/04/Daily-Spanish-20200204/","content":"<h2 id=\"impacto-de-SARS-y-el-vinculo-con-el-virus-actual\"><a href=\"#impacto-de-SARS-y-el-vinculo-con-el-virus-actual\" class=\"headerlink\" title=\"impacto de SARS y el vínculo con el virus actual\"></a>impacto de SARS y el vínculo con el virus actual</h2><p>@(Coronavirus)[SARS|Wuhan|insalubre]</p>\n<p>en 2002 un brote de otro coronavirus, dejó cientos de muertos。</p>\n<pre><code>muerto: corpse, dead body\nmuerte: death</code></pre><h3 id=\"impacto-de-SARS\"><a href=\"#impacto-de-SARS\" class=\"headerlink\" title=\"impacto de SARS\"></a>impacto de SARS</h3><p>es difícil comparar esta enfermedad con el SARS, es más leve, <code>la forma en que</code> afecta el pulmón no <code>es como la</code> del SARS. Sin embargo, la naturaleza más leve del virus también puede ser motivo de preocupación.<br>Según diversos <code>estudios académicos</code>, la falta de transparencia en el brote de 2002-2003 <code>perjudicó</code> la posición de China en el <code>escenario internacional</code> y provocó que su crecimiento económico se desacelerara.<br> El brote de SARS <code>fue visto</code> como un <code>catalizador</code> para el cambio en el sistema médico de China y el gasto en salud aumentó posteriormente.<br>según cuenta el servicio chino de la BBC; antes de 2003, los médicos solían reportar enfermedades infeccionsas llenando tarjetas a mano y luego enviándolas por fax a una oficina central.<br>Despúes del SARS, el gobierno creó un sisitema <code>centralizado en línea</code> que conecta clínicas y hospitales en todo el país y les permite informar casos en tempo real.<br>lo que <code>tomó meses</code> durante el tiempo de SARS ahora es cuestión de semanas o días. dijo en una conferencia de prensa a principois de esta semana.</p>\n<h3 id=\"las-falencias\"><a href=\"#las-falencias\" class=\"headerlink\" title=\"las falencias\"></a>las falencias</h3><p>Sin embargo, el nuevo brote también ha mostrado <code>falencias</code>(shortcoming) en el sistema de salud que han llevado a la propagación del nuevo virus.<br>ya en 2006, se alertó que era crucial el saneamiento(sanitation) de los mercados de China, mal administrados, <code>insalubres</code> (unhealth) y una fuente peligrosa de posibles nuevas infecciones.<br>Sin embargo, la <code>situación sanitaria</code> del mercado de Wuhan, donde se venden anmiales como ratas cachorros de lobo, serpientes y civeetas, parece estar detrás del nuevo brote. </p>\n","categories":[],"tags":["Spanish","Daily"]},{"title":"Daily Spanish 20200203","url":"http://jcwu.ml/2020/02/03/Daily-Spanish-20200203/","content":"<h2 id=\"¿Por-que-la-masiva-cuarentena-en-China-¨creara-mas-problemas-de-los-que-resuelve¨\"><a href=\"#¿Por-que-la-masiva-cuarentena-en-China-¨creara-mas-problemas-de-los-que-resuelve¨\" class=\"headerlink\" title=\"¿Por qué la masiva cuarentena en China ¨creará más problemas de los que resuelve¨?\"></a>¿Por qué la masiva cuarentena en China ¨creará más problemas de los que resuelve¨?</h2><p>(<a href=\"https://www.bbc.com/mundo/noticias-51357804\" target=\"_blank\" rel=\"noopener\">https://www.bbc.com/mundo/noticias-51357804</a>)</p>\n<blockquote>\n<p>registrar…casos, gravedad, confinado, previnir la propagación.<br>poner en cuarentena, práctica establecida, drástica.<br>se basa en la suposición,  identificar el grupo de mayor riesgo.<br>igonrar el derecho<br>esta magnitud,superfluo, abarrotar,   escasez,estancada<br><br/></p>\n</blockquote>\n<p>Hasta este lunes, China había <code>registrado</code> cerca de 18.000 casos pero solo 360 <code>muertes</code>.  A pesar de la leve gravedad de esta enfermedad, más de 50 millones de personas en la provincia de Hubei, fueron <code>confinadas</code> en su región mientras las autoridades intentan prevenir la <code>propagación</code> de virus. El transporte público se ha cerrado en varias ciudades. </p>\n<p>Aunque el aislamiento es una práctica bien establecida para casos individuales, <code>poner en cuarentena</code> a millones de personas sanas no tiene precedentes en salud pública. </p>\n<p>Dado el contexto histórico, esto no es <code>sorprendente</code>, los chinos conocen bien los brotes de enfermedades virales. Los recuerdos de SARS han resurgido. Pero ¿se justifica una respuesta tan drástica?</p>\n<p>Primero, el argumento a favor de la cuarentena masiva <code>se basa en</code> la peligrosa suposición de que el riesgo de infección de una persona es el mismo que el de otra. Sabemos que este no es el caso, particularmente en una etapa temprana de un brote, ya que hay grupos de mayor riesgo que pueden ser identificados antes de considerar estrategias <code>radicales</code>.</p>\n<p>En segundo lugar, una respuesta de salud pública china debe proteger a los que están dentro de la región afectada.la posición actual ignora flagrantemente los derechos de las personas sanas en Wuhan y sus alrededores.<br>Podemos estimar conservadoramente que más 99.9% de los habitantes del lugar no están contagiados.<br>Tal bloqueo geográfico de esta magnitud no solo es superfluo, sino que también de cuarentena ha resultado en hospitales <code>abarrotados</code>,(packed out) <code>escasez</code>(shortage) de alimentos y la economía local <code>estancada</code>.  (stagnant)</p>\n","categories":[],"tags":["Spanish","Daily"]},{"title":"JavaScript中的this","url":"http://jcwu.ml/2020/02/03/JavaScript中的this/","content":"<h2 id=\"你所有需要知道的关于Javascript中的this\"><a href=\"#你所有需要知道的关于Javascript中的this\" class=\"headerlink\" title=\"你所有需要知道的关于Javascript中的this\"></a>你所有需要知道的关于Javascript中的<code>this</code></h2><p style=\"text-align: center; border:  4px solid olive \">总的原则：函数调用=修改执行环境</p>\n\n<blockquote>\n<p>执行环境(execution context):  </p>\n</blockquote>\n<ul>\n<li>全局执行环境在任何代码执行<code>前</code>已创建</li>\n<li>但执行一个函数（function）时候，会创造一个<code>新</code>的执行环境，此时存在一个<code>memory creation 阶段</code>包含：<ol>\n<li>Scope创建： 哪些<code>变量</code>（variable）或者<code>函数</code>（function）是此执行环境可以用到的，Hoist</li>\n<li>Scope Chain: 每一个执行环境还需要知道其外部包裹的scope，最终到最上层全局的scope作为一个链（chain），此链不包括sibling scope （同等级的外部函数）或者（children scope）此函数内部的scope<br>所以:<ul>\n<li>a.全局变量是在此函数使用的，但是此函数里的变量无法在全局使用</li>\n<li>b. 其它函数的局部变量也不能在此函数引用</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>this被创建，总是指向<code>当前代码</code>的执行环境。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(one) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(two)  <span class=\"comment\">// ReferenceError: two is not defined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(three) <span class=\"comment\">// ReferenceError: three is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(one) <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(two) <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(three) <span class=\"comment\">// ReferenceError: three is not defined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> two = <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(two) <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myOtherFunc</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(one) <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(two) <span class=\"comment\">// ReferenceError: two is not defined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(three) <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> three = <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(three) <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myFunc()</span><br><span class=\"line\">myOtherFunc()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"this被创建以后，总是指向执行时候的leaidng-parent-object：\"><a href=\"#this被创建以后，总是指向执行时候的leaidng-parent-object：\" class=\"headerlink\" title=\"this被创建以后，总是指向执行时候的leaidng parent object：\"></a>this被创建以后，总是指向执行时候的<code>leaidng parent object</code>：</h3><ul>\n<li>对于在全局中直接使用，在任何函数外部：this对应的是<code>window</code>，可相互交换使用.<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log (<span class=\"keyword\">this</span>===<span class=\"built_in\">window</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">a=<span class=\"number\">37</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// 37</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.b=<span class=\"string\">\"MDN\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.b); <span class=\"comment\">//\"MDN\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//\"MDN\"</span></span><br></pre></td></tr></table></figure></li>\n<li>this在函数内部的但是也在全局中直接调用function(), 实际上window.function(), 所以this指向的是window。<ul>\n<li>不在严格模式下， this默认指向全局对象.  在严格模式下面，this 将指向undefined<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在浏览器中：</span></span><br><span class=\"line\">f1() === <span class=\"built_in\">window</span>;   <span class=\"comment\">//在浏览器中，全局对象是window</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在Node中，严格模式下</span></span><br><span class=\"line\">f1() === global;  <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>作为对象的方法，Object.method, 此时leading parents objects 指向的是执行时候的<code>此object</code>，<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    a:<span class=\"number\">1</span>,</span><br><span class=\"line\">    getA:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.getA();       <span class=\"comment\">//输出1，作为对象的方法调用，this指向此obj</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = obj.getA;</span><br><span class=\"line\">x();   <span class=\"comment\">//输出2，执行此语句时候相当于window.x(), 而不是指向obj</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>xs</p>\n<h3 id=\"其它例子：\"><a href=\"#其它例子：\" class=\"headerlink\" title=\"其它例子：\"></a>其它例子：</h3><ul>\n<li>例1: object中有嵌套函数，在执行myObj.myMethod()依次执行两个命令：<ul>\n<li><ol>\n<li>调用函数myFunc()，设置<code>新的环境对象</code>以及this,此时myFunc()前面没有<code>leading parents object</code>,所以this自动指向window；</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>返回myMethod()函数，执行consloe.log(this), myObj.myMethod()的<code>leading parents object</code>,是myObj,因此的this就是指向myObj此对象。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myObj &#x3D; &#123;</span><br><span class=\"line\">  myMethod: function () &#123;    </span><br><span class=\"line\">    myFunc()</span><br><span class=\"line\">      console.log(this); &#x2F;&#x2F; [object Object]</span><br><span class=\"line\">    function myFunc () &#123;</span><br><span class=\"line\">      console.log(this)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myObj.myMethod()  &#x2F;&#x2F;[object Window]</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n</li>\n<li>例2: 如果修改例子如下，执行myObj.myMethod()的时候执行：<ul>\n<li>对于变量x进行赋值</li>\n<li>执行x.k(), 进入函数k()，设置<code>新的环境对象</code>以及this,x.k()的<code>leading parents object</code>是x，所以，k()中的this指向的是myFunc()此对象；<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObj = &#123;</span><br><span class=\"line\">  myMethod: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> x =&#123;<span class=\"attr\">k</span>:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    x.k();    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myObj.myMethod(); <span class=\"comment\">//[object Object]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>例3:  对于下面例子,在执行xiaomi.age()时，由于this.birth中this没有<code>leading parents obejct</code>,所以this指向window，而在window中没有birth，所以结果显示错误。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiaomi = &#123;</span><br><span class=\"line\">name:<span class=\"string\">'小米'</span>,</span><br><span class=\"line\">birth:<span class=\"number\">1990</span>,</span><br><span class=\"line\">age:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAgeFromBirth</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> y =<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> y-<span class=\"keyword\">this</span>.birth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> getAgeFromBirth();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiaomi.age()); <span class=\"comment\">//Nah</span></span><br></pre></td></tr></table></figure>\n增加全局变量birth以后，结果正确：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">birth=<span class=\"number\">1990</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaomi = &#123;</span><br><span class=\"line\">name:<span class=\"string\">'小米'</span>,</span><br><span class=\"line\">birth:<span class=\"number\">1990</span>,</span><br><span class=\"line\">age:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAgeFromBirth</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> y =<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> y-<span class=\"keyword\">this</span>.birth;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> getAgeFromBirth(); <span class=\"comment\">//30</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">又或者，在<span class=\"function\"><span class=\"keyword\">function</span>中设置一个变量<span class=\"title\">that</span>，调用<span class=\"title\">xiaomi</span>.<span class=\"title\">age</span>(<span class=\"params\"></span>)时候，先用<span class=\"title\">that</span>捕获了<span class=\"title\">this</span>的值，即指向外层的<span class=\"title\">function</span>(<span class=\"params\"></span>)，然后调用函数<span class=\"title\">getAgeFromBirth</span>(<span class=\"params\"></span>)，设置新的`<span class=\"title\">execution</span> <span class=\"title\">context</span>`而此时<span class=\"title\">getAgeFromBirth</span>(<span class=\"params\"></span>)是可以使用外层变量<span class=\"title\">that</span>的，所以<span class=\"title\">that</span>.<span class=\"title\">birth</span> 反映的值是<span class=\"title\">birth</span>:1990。</span></span><br><span class=\"line\"><span class=\"function\">```<span class=\"title\">javacript</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">birth</span>=1995;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">var</span> <span class=\"title\">xiaomi</span> = </span>&#123;</span><br><span class=\"line\">name:<span class=\"string\">'小米'</span>,</span><br><span class=\"line\">birth:<span class=\"number\">1990</span>,</span><br><span class=\"line\">age:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    that=<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAgeFromBirth</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> y =<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> y-that.birth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> getAgeFromBirth();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiaomi.age()); <span class=\"comment\">//30</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"改变this指向-apply-call-或者bind\"><a href=\"#改变this指向-apply-call-或者bind\" class=\"headerlink\" title=\"改变this指向: apply(),call(),或者bind()\"></a>改变this指向: apply(),call(),或者bind()</h5>所有的JavaScript函数都可以通过<code>prototypal inheritance</code>（站内链接）使用此3个方法，<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var greet &#x3D; &#39;Hello!&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">function showGreet () &#123;</span><br><span class=\"line\">  console.log(this.greet)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var casualGreet &#x3D; &#123; greet: &#39;Hey!&#39; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">showGreet()                    &#x2F;&#x2F; 直接使用函数，this指向window,Hello!</span><br><span class=\"line\">showGreet.bind(casualGreet)()  &#x2F;&#x2F; this指向变量casualGreet，结果是Hey!</span><br><span class=\"line\">showGreet.call(casualGreet)    &#x2F;&#x2F; this指向变量casualGreet，Hey!</span><br><span class=\"line\">showGreet.apply(casualGreet)   &#x2F;&#x2F; this指向变量casualGreet，Hey!</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>x=指向的函数或者变量；</p>\n<pre><code>apply(x)=call(x)=bind(x)();</code></pre><p>使用apply(x)与call(x)返回调用内部函数后的结果，使用bind(x)返回的是内部函数，使用bind(x)()调用内部函数后返回结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greet = <span class=\"string\">'Hello!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showGreet</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.greet)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> casualGreet = &#123; <span class=\"attr\">greet</span>: <span class=\"string\">'Hey!'</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">showGreet();                   <span class=\"comment\">// Hello!</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newShowGreet = showGreet.bind(casualGreet);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newShowGreet);</span><br><span class=\"line\"><span class=\"comment\">//function showGreet() &#123; 还是showGreet()函数，但是函数中this变了</span></span><br><span class=\"line\"><span class=\"comment\">//       [native code]</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行栈(execution stack)</p>\n</blockquote>\n<ol>\n<li>如果有2个函数调用(2个函数的关系可以是包含，或者同级别)，现在就有3个<code>execution contexts</code>（执行环境）,除了此函数的2个，还包括全局的<code>execution context</code>.</li>\n<li>新的execution context建立以后，会建立在执行栈的<code>栈顶</code>，所以当开始运行程序时，首先进入栈的是全局的环境，当开始执行其它函数时候，把新的执行环境压入栈顶</li>\n<li>由于JavaScript每次只能有<code>一个</code>执行环境，所以当调用函数a时，全局执行环境需要压栈，进入执行环境a，然后建立此执行环境的scope以及this（这里区别上面说的Scope，Scope表示此执行环境中需要用到的变量，可以包括比如全局变量）</li>\n<li>当执行函数a，如果有函数b要执行（比如b是a的子函数），把a的执行环境压栈，建立b的执行环境</li>\n<li>当执行完b以后，b的执行环境从执行栈中删除，进入a的执行环境，当指向完a函数，删除a的执行环境，此时当没有其它函数执行时，返回全局执行环境。<br>所以JavaScript是<code>单线程</code>。</li>\n</ol>\n<p>参考/reference：<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this</a><br><a href=\"https://codeburst.io/js-demystified-04-execution-context-97dea52c8ac6\" target=\"_blank\" rel=\"noopener\">https://codeburst.io/js-demystified-04-execution-context-97dea52c8ac6</a></p>\n","categories":[],"tags":["Javascript"]},{"title":"Pilot","url":"http://jcwu.ml/2020/01/28/Pilot/","content":"<p>MVVM 框架<br>使用AJAX，不用刷新页面进行数据内容修改，典型MVVM框架有 <code>Angular.js</code>, <code>react.js</code>,<code>vue.js</code>.</p>\n<p>vue.js: <a href=\"https://cn.vuejs.org/index.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/index.html</a></p>\n<p>数据驱动+组件化: vue.js 的社区比较完善<br>Vue.js 的核心思想</p>\n<p><img src=\"/images/power_girl.png\" alt=\"\"><br><img src=\"https://tva1.sinaimg.cn/large/006tNbRwgy1gbjmicxy06j30j60asgmv.jpg\" alt=\"\"><br>![]file:///private/var/folders/bw/ql08q7s902lfdc_vyfbq03tc0000gn/T/WizNote/4ed5ecb0-df6e-11e9-bbc4-075e5a6f73ae/index_files/1572349522753-mg8.png</p>\n","categories":[],"tags":["中文","AJAX","前端","Vue"]},{"title":"Hello World","url":"http://jcwu.ml/2020/01/27/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"about","url":"http://jcwu.ml/about/index.html","content":"<p>about:</p>\n<ul>\n<li>type: me<br>icon: icon-user<br>text_value:<ul>\n<li>“Scut，1991，Spring.”</li>\n<li>“喜欢设计，擅长编程，喜欢睡懒觉.”</li>\n<li>“前端开发工程师，常用 HTML / CSS / JavaScript.”</li>\n</ul>\n</li>\n<li>type: Github<br>icon: icon-github<br>text_key: Github<br>text_value: “@forsigner”<br>text_value_url: <a href=\"https://github.com/forsigner\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner</a></li>\n<li>type: weibo<br>icon: icon-weibo<br>text_key: 微博<br>text_value: “@forsigner”<br>text_value_url: <a href=\"http://weibo.com/u/1847075964\" target=\"_blank\" rel=\"noopener\">http://weibo.com/u/1847075964</a></li>\n<li>type: mail<br>icon: icon-mail<br>text_key: Gmail<br>text_value: “<a href=\"mailto:forsigner@gmail.com\">forsigner@gmail.com</a>“</li>\n<li>type: location<br>icon: icon-location<br>text_value: 珠海</li>\n</ul>\n","categories":[],"tags":[]},{"title":"project","url":"http://jcwu.ml/project/index.html","content":"<p>project:</p>\n<ul>\n<li>type: personal<br>name: fexo<br>url: <a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/fexo</a><br>intro: A minimalist design theme for hexo<h1 id=\"type-company\"><a href=\"#type-company\" class=\"headerlink\" title=\"- type: company\"></a>- type: company</h1><h1 id=\"name-Fexo\"><a href=\"#name-Fexo\" class=\"headerlink\" title=\"name: Fexo\"></a>name: Fexo</h1><h1 id=\"url-https-github-com-forsigner-fexo\"><a href=\"#url-https-github-com-forsigner-fexo\" class=\"headerlink\" title=\"url: https://github.com/forsigner/fexo\"></a>url: <a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/fexo</a></h1><h1 id=\"intro-A-minimalist-design-theme-for-hexo\"><a href=\"#intro-A-minimalist-design-theme-for-hexo\" class=\"headerlink\" title=\"intro: A minimalist design theme for hexo\"></a>intro: A minimalist design theme for hexo</h1></li>\n<li>type: personal<br>name: beside<br>url: <a href=\"https://github.com/forsigner/beside\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/beside</a><br>intro: I need you beside me</li>\n<li>type: personal<br>name: web-fontmin<br>url: <a href=\"https://github.com/forsigner/web-fontmin\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/web-fontmin</a><br>intro: 字体子集化，在线提取你需要的字体</li>\n<li>type: personal<br>name: magic-check<br>url: <a href=\"https://github.com/forsigner/magic-check\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/magic-check</a><br>intro: Beautify Radio and Checkbox with pure CSS</li>\n<li>type: personal<br>name: nice-bar<br>url: <a href=\"https://github.com/forsigner/nice-bar\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/nice-bar</a><br>intro: A nice and lightweight scrollbar</li>\n<li>type: personal<br>name: angular-nice-bar<br>url: <a href=\"https://github.com/forsigner/angular-nice-bar\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/angular-nice-bar</a><br>intro: A nice and lightweight scrollbar in Angular</li>\n</ul>\n","categories":[],"tags":[]},{"title":"category","url":"http://jcwu.ml/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://jcwu.ml/link/index.html","content":"<p>link:</p>\n<ul>\n<li>name: 织网<br>info: 身体和灵魂，总有一个在路上<br>url: <a href=\"http://zheng-ji.info/\" target=\"_blank\" rel=\"noopener\">http://zheng-ji.info/</a><br>avatar: <a href=\"https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460</a></li>\n<li>name: Dongyado<br>info: 生命不止，折腾不息<br>url: <a href=\"http://dongyado.com/\" target=\"_blank\" rel=\"noopener\">http://dongyado.com/</a><br>avatar: <a href=\"https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460</a></li>\n<li>name: OrangeCoder<br>info: android ffmpeg nodejs gradle<br>url: <a href=\"http://orangecoder.com/\" target=\"_blank\" rel=\"noopener\">http://orangecoder.com/</a><br>avatar: <a href=\"https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460</a></li>\n<li>name: EverET<br>info: 好记性不如烂笔头<br>url: <a href=\"http://everet.org/about-me/\" target=\"_blank\" rel=\"noopener\">http://everet.org/about-me/</a><br>avatar: <a href=\"https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460</a></li>\n</ul>\n","categories":[],"tags":[]},{"title":"search","url":"http://jcwu.ml/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://jcwu.ml/tag/index.html","content":"","categories":[],"tags":[]}]